{"ast":null,"code":"import { Base } from './Base.js';\nimport * as utils from './utils.js';\nexport class Struct extends Base {\n  constructor() {\n    let fields = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    this.fields = fields;\n  }\n  decode(stream, parent) {\n    let length = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    const res = this._setup(stream, parent, length);\n    this._parseFields(stream, res, this.fields);\n    if (this.process != null) {\n      this.process.call(res, stream);\n    }\n    return res;\n  }\n  _setup(stream, parent, length) {\n    const res = {};\n\n    // define hidden properties\n    Object.defineProperties(res, {\n      parent: {\n        value: parent\n      },\n      _startOffset: {\n        value: stream.pos\n      },\n      _currentOffset: {\n        value: 0,\n        writable: true\n      },\n      _length: {\n        value: length\n      }\n    });\n    return res;\n  }\n  _parseFields(stream, res, fields) {\n    for (let key in fields) {\n      var val;\n      const type = fields[key];\n      if (typeof type === 'function') {\n        val = type.call(res, res);\n      } else {\n        val = type.decode(stream, res);\n      }\n      if (val !== undefined) {\n        if (val instanceof utils.PropertyDescriptor) {\n          Object.defineProperty(res, key, val);\n        } else {\n          res[key] = val;\n        }\n      }\n      res._currentOffset = stream.pos - res._startOffset;\n    }\n  }\n  size(val, parent) {\n    let includePointers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    if (val == null) {\n      val = {};\n    }\n    const ctx = {\n      parent,\n      val,\n      pointerSize: 0\n    };\n    if (this.preEncode != null) {\n      this.preEncode.call(val);\n    }\n    let size = 0;\n    for (let key in this.fields) {\n      const type = this.fields[key];\n      if (type.size != null) {\n        size += type.size(val[key], ctx);\n      }\n    }\n    if (includePointers) {\n      size += ctx.pointerSize;\n    }\n    return size;\n  }\n  encode(stream, val, parent) {\n    let type;\n    if (this.preEncode != null) {\n      this.preEncode.call(val, stream);\n    }\n    const ctx = {\n      pointers: [],\n      startOffset: stream.pos,\n      parent,\n      val,\n      pointerSize: 0\n    };\n    ctx.pointerOffset = stream.pos + this.size(val, ctx, false);\n    for (let key in this.fields) {\n      type = this.fields[key];\n      if (type.encode != null) {\n        type.encode(stream, val[key], ctx);\n      }\n    }\n    let i = 0;\n    while (i < ctx.pointers.length) {\n      const ptr = ctx.pointers[i++];\n      ptr.type.encode(stream, ptr.val, ptr.parent);\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}