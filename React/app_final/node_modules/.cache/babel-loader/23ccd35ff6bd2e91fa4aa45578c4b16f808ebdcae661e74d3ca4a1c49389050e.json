{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { toast } from 'react-toastify';\nconst Login = () => {\n  _s();\n  //logic section\n\n  //make a useState for 5 fields\n\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  //use state for error message\n\n  const [emailError, setEmailError] = useState('');\n  const [passwordError, setPasswordError] = useState('');\n\n  //validation\n  var validate = () => {\n    var isValid = true;\n    if (email.trim() === '' || !email.includes('@')) {\n      setEmailError(\"Email is required\");\n      isValid = false;\n    }\n    if (password.trim() === '') {\n      setPasswordError(\"Password is required\");\n      isValid = false;\n    }\n    return isValid;\n  };\n\n  //login button function\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    //call the validator\n    var isValidated = validate();\n    if (!isValidated) {\n      return;\n    }\n    const data = {\n      \"email\": email,\n      \"password\": password\n    };\n    loginUserApi(data).then(res => {\n      if (res.data.success === false) {\n        toast.error(res.data.message);\n      } else {\n        toast.success(res.data.message);\n\n        //succes-bool, message-text, token-text, user data-json object \n        //setting token and user data in local storage\n        localStorage.setItem('token', res.data.token);\n\n        //setting user data\n        const convertedData = JSON.stringify(res.data.userData);\n\n        //local storage set\n        localStorage.setItem('user', convertedData);\n      }\n    });\n  };\n};\n_s(Login, \"mYnrU+xg+8tewUeZClc7aescQ+s=\");\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["useState","toast","Login","_s","email","setEmail","password","setPassword","emailError","setEmailError","passwordError","setPasswordError","validate","isValid","trim","includes","handleSubmit","e","preventDefault","isValidated","data","loginUserApi","then","res","success","error","message","localStorage","setItem","token","convertedData","JSON","stringify","userData","_c","$RefreshReg$"],"sources":["/Users/ayush/Desktop/Developer/React/app_final/src/pages/login.jsx"],"sourcesContent":["import { useState } from 'react'\nimport { toast } from 'react-toastify'\n\n\nconst Login = () => {\n\n    //logic section\n\n    //make a useState for 5 fields\n\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n\n    //use state for error message\n\n    const [emailError, setEmailError] = useState('')\n    const [passwordError, setPasswordError] = useState('')\n\n\n\n    //validation\n    var validate = () => {\n        var isValid = true;\n\n        if (email.trim() === '' || !email.includes('@')) {\n            setEmailError(\"Email is required\")\n            isValid = false;\n        }\n\n        if (password.trim() === '') {\n            setPasswordError(\"Password is required\")\n            isValid = false;\n        }\n\n        return isValid\n    }\n\n    //login button function\n    const handleSubmit = (e) => {\n        e.preventDefault()\n\n        //call the validator\n        var isValidated = validate();\n        if (!isValidated) {\n            return\n        }\n        const data = {\n            \"email\": email,\n            \"password\": password\n        }\n\n        loginUserApi(data).then((res) => {\n            if (res.data.success === false) {\n                toast.error(res.data.message)\n            }\n            else {\n                toast.success(res.data.message)\n\n                //succes-bool, message-text, token-text, user data-json object \n                //setting token and user data in local storage\n                localStorage.setItem('token', res.data.token)\n\n                //setting user data\n                const convertedData = JSON.stringify(res.data.userData)\n\n                //local storage set\n                localStorage.setItem('user', convertedData)\n\n\n            }\n\n\n        })\n\n    }\n\n\n\n}\nexport default Login;"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,KAAK,QAAQ,gBAAgB;AAGtC,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEhB;;EAEA;;EAEA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACM,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;;EAE5C;;EAEA,MAAM,CAACQ,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACU,aAAa,EAAEC,gBAAgB,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;;EAItD;EACA,IAAIY,QAAQ,GAAGA,CAAA,KAAM;IACjB,IAAIC,OAAO,GAAG,IAAI;IAElB,IAAIT,KAAK,CAACU,IAAI,CAAC,CAAC,KAAK,EAAE,IAAI,CAACV,KAAK,CAACW,QAAQ,CAAC,GAAG,CAAC,EAAE;MAC7CN,aAAa,CAAC,mBAAmB,CAAC;MAClCI,OAAO,GAAG,KAAK;IACnB;IAEA,IAAIP,QAAQ,CAACQ,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MACxBH,gBAAgB,CAAC,sBAAsB,CAAC;MACxCE,OAAO,GAAG,KAAK;IACnB;IAEA,OAAOA,OAAO;EAClB,CAAC;;EAED;EACA,MAAMG,YAAY,GAAIC,CAAC,IAAK;IACxBA,CAAC,CAACC,cAAc,CAAC,CAAC;;IAElB;IACA,IAAIC,WAAW,GAAGP,QAAQ,CAAC,CAAC;IAC5B,IAAI,CAACO,WAAW,EAAE;MACd;IACJ;IACA,MAAMC,IAAI,GAAG;MACT,OAAO,EAAEhB,KAAK;MACd,UAAU,EAAEE;IAChB,CAAC;IAEDe,YAAY,CAACD,IAAI,CAAC,CAACE,IAAI,CAAEC,GAAG,IAAK;MAC7B,IAAIA,GAAG,CAACH,IAAI,CAACI,OAAO,KAAK,KAAK,EAAE;QAC5BvB,KAAK,CAACwB,KAAK,CAACF,GAAG,CAACH,IAAI,CAACM,OAAO,CAAC;MACjC,CAAC,MACI;QACDzB,KAAK,CAACuB,OAAO,CAACD,GAAG,CAACH,IAAI,CAACM,OAAO,CAAC;;QAE/B;QACA;QACAC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEL,GAAG,CAACH,IAAI,CAACS,KAAK,CAAC;;QAE7C;QACA,MAAMC,aAAa,GAAGC,IAAI,CAACC,SAAS,CAACT,GAAG,CAACH,IAAI,CAACa,QAAQ,CAAC;;QAEvD;QACAN,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEE,aAAa,CAAC;MAG/C;IAGJ,CAAC,CAAC;EAEN,CAAC;AAIL,CAAC;AAAA3B,EAAA,CA1EKD,KAAK;AAAAgC,EAAA,GAALhC,KAAK;AA2EX,eAAeA,KAAK;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}