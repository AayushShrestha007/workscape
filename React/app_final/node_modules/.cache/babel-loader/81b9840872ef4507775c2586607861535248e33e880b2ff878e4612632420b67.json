{"ast":null,"code":"import { Number as NumberT } from './Number.js';\nexport function resolveLength(length, stream, parent) {\n  let res;\n  if (typeof length === 'number') {\n    res = length;\n  } else if (typeof length === 'function') {\n    res = length.call(parent, parent);\n  } else if (parent && typeof length === 'string') {\n    res = parent[length];\n  } else if (stream && length instanceof NumberT) {\n    res = length.decode(stream);\n  }\n  if (isNaN(res)) {\n    throw new Error('Not a fixed size');\n  }\n  return res;\n}\n;\nexport class PropertyDescriptor {\n  constructor() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.enumerable = true;\n    this.configurable = true;\n    for (let key in opts) {\n      const val = opts[key];\n      this[key] = val;\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}