{"ast":null,"code":"import { DecodeStream } from './DecodeStream.js';\nimport { Base } from './Base.js';\nclass NumberT extends Base {\n  constructor(type) {\n    let endian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'BE';\n    super();\n    this.type = type;\n    this.endian = endian;\n    this.fn = this.type;\n    if (this.type[this.type.length - 1] !== '8') {\n      this.fn += this.endian;\n    }\n  }\n  size() {\n    return DecodeStream.TYPES[this.type];\n  }\n  decode(stream) {\n    return stream[`read${this.fn}`]();\n  }\n  encode(stream, val) {\n    return stream[`write${this.fn}`](val);\n  }\n}\nexport { NumberT as Number };\nexport const uint8 = new NumberT('UInt8');\nexport const uint16be = new NumberT('UInt16', 'BE');\nexport const uint16 = uint16be;\nexport const uint16le = new NumberT('UInt16', 'LE');\nexport const uint24be = new NumberT('UInt24', 'BE');\nexport const uint24 = uint24be;\nexport const uint24le = new NumberT('UInt24', 'LE');\nexport const uint32be = new NumberT('UInt32', 'BE');\nexport const uint32 = uint32be;\nexport const uint32le = new NumberT('UInt32', 'LE');\nexport const int8 = new NumberT('Int8');\nexport const int16be = new NumberT('Int16', 'BE');\nexport const int16 = int16be;\nexport const int16le = new NumberT('Int16', 'LE');\nexport const int24be = new NumberT('Int24', 'BE');\nexport const int24 = int24be;\nexport const int24le = new NumberT('Int24', 'LE');\nexport const int32be = new NumberT('Int32', 'BE');\nexport const int32 = int32be;\nexport const int32le = new NumberT('Int32', 'LE');\nexport const floatbe = new NumberT('Float', 'BE');\nexport const float = floatbe;\nexport const floatle = new NumberT('Float', 'LE');\nexport const doublebe = new NumberT('Double', 'BE');\nexport const double = doublebe;\nexport const doublele = new NumberT('Double', 'LE');\nexport class Fixed extends NumberT {\n  constructor(size, endian) {\n    let fracBits = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : size >> 1;\n    super(`Int${size}`, endian);\n    this._point = 1 << fracBits;\n  }\n  decode(stream) {\n    return super.decode(stream) / this._point;\n  }\n  encode(stream, val) {\n    return super.encode(stream, val * this._point | 0);\n  }\n}\nexport const fixed16be = new Fixed(16, 'BE');\nexport const fixed16 = fixed16be;\nexport const fixed16le = new Fixed(16, 'LE');\nexport const fixed32be = new Fixed(32, 'BE');\nexport const fixed32 = fixed32be;\nexport const fixed32le = new Fixed(32, 'LE');","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}