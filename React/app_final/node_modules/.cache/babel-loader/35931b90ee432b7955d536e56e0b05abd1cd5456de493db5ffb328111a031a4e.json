{"ast":null,"code":"import { Array as ArrayT } from './Array.js';\nimport { Number as NumberT } from './Number.js';\nimport * as utils from './utils.js';\nexport class LazyArray extends ArrayT {\n  decode(stream, parent) {\n    const {\n      pos\n    } = stream;\n    const length = utils.resolveLength(this.length, stream, parent);\n    if (this.length instanceof NumberT) {\n      parent = {\n        parent,\n        _startOffset: pos,\n        _currentOffset: 0,\n        _length: length\n      };\n    }\n    const res = new LazyArrayValue(this.type, length, stream, parent);\n    stream.pos += length * this.type.size(null, parent);\n    return res;\n  }\n  size(val, ctx) {\n    if (val instanceof LazyArrayValue) {\n      val = val.toArray();\n    }\n    return super.size(val, ctx);\n  }\n  encode(stream, val, ctx) {\n    if (val instanceof LazyArrayValue) {\n      val = val.toArray();\n    }\n    return super.encode(stream, val, ctx);\n  }\n}\nclass LazyArrayValue {\n  constructor(type, length, stream, ctx) {\n    this.type = type;\n    this.length = length;\n    this.stream = stream;\n    this.ctx = ctx;\n    this.base = this.stream.pos;\n    this.items = [];\n  }\n  get(index) {\n    if (index < 0 || index >= this.length) {\n      return undefined;\n    }\n    if (this.items[index] == null) {\n      const {\n        pos\n      } = this.stream;\n      this.stream.pos = this.base + this.type.size(null, this.ctx) * index;\n      this.items[index] = this.type.decode(this.stream, this.ctx);\n      this.stream.pos = pos;\n    }\n    return this.items[index];\n  }\n  toArray() {\n    const result = [];\n    for (let i = 0, end = this.length; i < end; i++) {\n      result.push(this.get(i));\n    }\n    return result;\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}