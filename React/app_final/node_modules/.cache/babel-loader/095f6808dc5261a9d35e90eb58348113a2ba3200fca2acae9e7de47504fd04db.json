{"ast":null,"code":"export const readUInt8 = (array, offset) => {\n  return array[offset];\n};\nexport const readUInt16BE = (array, offset) => {\n  return array[offset] << 8 | array[offset + 1];\n};\nexport const readUInt16LE = (array, offset) => {\n  return array[offset] | array[offset + 1] << 8;\n};\nexport const readUInt32BE = (array, offset) => {\n  return array[offset] << 24 | array[offset + 1] << 16 | array[offset + 2] << 8 | array[offset + 3];\n};\nexport const readUInt32LE = (array, offset) => {\n  return array[offset] | array[offset + 1] << 8 | array[offset + 2] << 16 | array[offset + 3] << 24;\n};\nexport const uint8ArrayToHexString = uint8Array => {\n  return Array.from(uint8Array, byte => byte.toString(16).padStart(2, \"0\")).join(\"\");\n};\nconst decoder = new TextDecoder(\"utf-8\");\nexport const uint8ArrayToString = uint8Array => {\n  return decoder.decode(uint8Array);\n};\nexport const concatenateUint8Arrays = arrays => {\n  const totalLength = arrays.reduce((length, arr) => length + arr.length, 0);\n  const concatenatedArray = new Uint8Array(totalLength);\n  let offset = 0;\n  arrays.forEach(arr => {\n    concatenatedArray.set(arr, offset);\n    offset += arr.length;\n  });\n  return concatenatedArray;\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}