{"ast":null,"code":"import axios from \"axios\";\n\n//creating backend Config!\nconst Api = axios.create({\n  baseURL: \"http://localhost:5500\",\n  withCredentials: true,\n  headers: {\n    \"Content-Type\": \"multipart/form-data\"\n  }\n});\n\n//creating config\nconst config = {\n  headers: {\n    authorization: `Bearer ${localStorage.getItem('token')}`\n  }\n};\n\n//API FOR APPLICANT\n//login api\nexport const loginUserApi = data => Api.post(\"/api/user/login\", data);\n//register api \nexport const registerUserApi = data => Api.post(\"/api/user/register\", data);\n\n//updateApplicantProfile API\nexport const updateApplicantProfile = (id, data) => Api.put(`/api/user/update_applicant/${id}`, data, config);\n\n//Resume creation API\nexport const createResumeApi = data => Api.post(\"/api/resume/create_resume\", data, config);\n\n//Resume fetching api\nexport const getAllResumesApi = (page, limit) => Api.get(`/api/resume/get_all_resume?page=${page}&limit=${limit}`, config);\n\n//API FOR EMPLOYER\n//login api\nexport const loginEmployerApi = data => Api.post(\"/api/employer/login\", data);\n//register api \nexport const registerEmployerApi = data => Api.post(\"/api/employer/register\", data);\n//create job API\nexport const createJobApi = data => Api.post(\"/api/job/create_job\", data, config);\n\n//updateApplicantProfile API\nexport const updateEmployerProfile = (id, data) => Api.put(`/api/employer/update_employer/${id}`, data, config);\nexport const updatePassword = (id, data) => Api.post(`/api/employer/update_password/${id}`, data, config);\n\n//fetch all open job by employer API\nexport const getAllOpenJobByEmployerApi = (page, limit) => Api.get(`/api/job/open_jobs_by_employer?page=${page}&limit=${limit}`, config);\n\n//fetch all open job API\nexport const getAllOpenJobApi = (page, limit) => Api.get(`/api/job/get_all_open_jobs?page=${page}&limit=${limit}`, config);\n\n//fetch job details by id\nexport const getJobDetailsByIdApi = id => Api.get(`/api/job/get_job_details/${id}`, config);\n\n//create application api\nexport const applyToJobApi = id => Api.post(\"/api/applications/apply\", id, config);\n\n//get applicants for job api\nexport const getApplicantsForJobApi = jobId => Api.get(`/api/job/${jobId}`, config);\n\n//get applied jobs of currently logged in user\nexport const getUserAppliedJobsApi = (page, limit) => Api.get(`/api/applications/get_all_applications?page=${page}&limit=${limit}`, config);\n\n//get offered applications of currently logged in user\nexport const getOfferedApplicationsApi = (page, limit) => Api.get(`/api/applications/get_all_offered_applications?page=${page}&limit=${limit}`, config);\n\n//get hired application of currently logged in user\nexport const getHiredApplicationApi = (page, limit) => Api.get(`/api/applications/get_hired_application?page=${page}&limit=${limit}`, config);\n\n//get hired application of currently logged in user\nexport const getCompletedApplicationApi = (page, limit) => Api.get(`/api/applications/get_complete_applications?page=${page}&limit=${limit}`, config);\n\n//get applications of currently logged in employer\nexport const getApplicationsByEmployerApi = (page, limit) => Api.get(`/api/applications/get_employer_applications?page=${page}&limit=${limit}`, config);\n\n//get hired applications of currently logged in employer\nexport const getHiredApplicationsByEmployerApi = (page, limit) => Api.get(`/api/applications/get_employer_hired_applications?page=${page}&limit=${limit}`, config);\n\n//get complete applications of currently logged in employer\nexport const getCompleteApplicationsByEmployerApi = (page, limit) => Api.get(`/api/applications/get_employer_complete_applications?page=${page}&limit=${limit}`, config);\n\n//update application status \nexport const updateApplicationStatusApi = data => Api.put(\"/api/applications/update_application_status\", data, config);","map":{"version":3,"names":["axios","Api","create","baseURL","withCredentials","headers","config","authorization","localStorage","getItem","loginUserApi","data","post","registerUserApi","updateApplicantProfile","id","put","createResumeApi","getAllResumesApi","page","limit","get","loginEmployerApi","registerEmployerApi","createJobApi","updateEmployerProfile","updatePassword","getAllOpenJobByEmployerApi","getAllOpenJobApi","getJobDetailsByIdApi","applyToJobApi","getApplicantsForJobApi","jobId","getUserAppliedJobsApi","getOfferedApplicationsApi","getHiredApplicationApi","getCompletedApplicationApi","getApplicationsByEmployerApi","getHiredApplicationsByEmployerApi","getCompleteApplicationsByEmployerApi","updateApplicationStatusApi"],"sources":["/Users/ayush/Desktop/security cw 2/React/app_final/src/apis/Api.js"],"sourcesContent":["import axios from \"axios\";\n\n//creating backend Config!\nconst Api = axios.create({\n    baseURL: \"http://localhost:5500\",\n    withCredentials: true,\n    headers: {\n        \"Content-Type\": \"multipart/form-data\"\n    }\n\n})\n\n//creating config\nconst config = {\n    headers: {\n        authorization: `Bearer ${localStorage.getItem('token')}`,\n    },\n};\n\n//API FOR APPLICANT\n//login api\nexport const loginUserApi = (data) => Api.post(\"/api/user/login\", data)\n//register api \nexport const registerUserApi = (data) => Api.post(\"/api/user/register\", data)\n\n//updateApplicantProfile API\nexport const updateApplicantProfile = (id, data) => Api.put(`/api/user/update_applicant/${id}`, data, config)\n\n//Resume creation API\nexport const createResumeApi = (data) => Api.post(\"/api/resume/create_resume\", data, config)\n\n//Resume fetching api\nexport const getAllResumesApi = (page, limit) => Api.get(`/api/resume/get_all_resume?page=${page}&limit=${limit}`, config)\n\n//API FOR EMPLOYER\n//login api\nexport const loginEmployerApi = (data) => Api.post(\"/api/employer/login\", data)\n//register api \nexport const registerEmployerApi = (data) => Api.post(\"/api/employer/register\", data)\n//create job API\nexport const createJobApi = (data) => Api.post(\"/api/job/create_job\", data, config)\n\n//updateApplicantProfile API\nexport const updateEmployerProfile = (id, data) => Api.put(`/api/employer/update_employer/${id}`, data, config)\n\nexport const updatePassword = (id, data) => Api.post(`/api/employer/update_password/${id}`, data, config)\n\n//fetch all open job by employer API\nexport const getAllOpenJobByEmployerApi = (page, limit) => Api.get(`/api/job/open_jobs_by_employer?page=${page}&limit=${limit}`, config)\n\n//fetch all open job API\nexport const getAllOpenJobApi = (page, limit) => Api.get(`/api/job/get_all_open_jobs?page=${page}&limit=${limit}`, config)\n\n//fetch job details by id\nexport const getJobDetailsByIdApi = (id) => Api.get(`/api/job/get_job_details/${id}`, config)\n\n//create application api\nexport const applyToJobApi = (id) => Api.post(\"/api/applications/apply\", id, config)\n\n//get applicants for job api\nexport const getApplicantsForJobApi = (jobId) => Api.get(`/api/job/${jobId}`, config);\n\n//get applied jobs of currently logged in user\nexport const getUserAppliedJobsApi = (page, limit) => Api.get(`/api/applications/get_all_applications?page=${page}&limit=${limit}`, config);\n\n//get offered applications of currently logged in user\nexport const getOfferedApplicationsApi = (page, limit) => Api.get(`/api/applications/get_all_offered_applications?page=${page}&limit=${limit}`, config);\n\n\n//get hired application of currently logged in user\nexport const getHiredApplicationApi = (page, limit) => Api.get(`/api/applications/get_hired_application?page=${page}&limit=${limit}`, config);\n\n//get hired application of currently logged in user\nexport const getCompletedApplicationApi = (page, limit) => Api.get(`/api/applications/get_complete_applications?page=${page}&limit=${limit}`, config);\n\n\n//get applications of currently logged in employer\nexport const getApplicationsByEmployerApi = (page, limit) => Api.get(`/api/applications/get_employer_applications?page=${page}&limit=${limit}`, config);\n\n//get hired applications of currently logged in employer\nexport const getHiredApplicationsByEmployerApi = (page, limit) => Api.get(`/api/applications/get_employer_hired_applications?page=${page}&limit=${limit}`, config);\n\n//get complete applications of currently logged in employer\nexport const getCompleteApplicationsByEmployerApi = (page, limit) => Api.get(`/api/applications/get_employer_complete_applications?page=${page}&limit=${limit}`, config);\n\n\n//update application status \nexport const updateApplicationStatusApi = (data) => Api.put(\"/api/applications/update_application_status\", data, config)\n\n\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}